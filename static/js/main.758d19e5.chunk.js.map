{"version":3,"sources":["context/UserContext.tsx","services/user.service.ts","components/Modal.tsx","components/EditForm.tsx","components/Dialog.tsx","components/UsersTable.tsx","pages/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Actions","getUsers","axios","get","initialState","users","JSON","parse","window","localStorage","getItem","isLoading","error","UserContext","createContext","state","dispatch","updateUsersLs","setItem","stringify","userReducer","action","type","setLoading","payload","addUsers","editUser","updatedUsers","map","user","login","uuid","id","data","removeUser","newUsers","filter","UserProvider","children","useReducer","useEffect","a","response","setError","length","fetchData","Provider","value","useStyles","makeStyles","createStyles","paper","position","width","backgroundColor","border","padding","left","top","transform","Modal","isOpen","handleClose","classes","open","onClose","aria-labelledby","aria-describedby","className","StyledFormGroup","withStyles","root","marginBottom","FormGroup","EditForm","onSubmit","useContext","useState","firstName","name","first","lastName","last","country","location","city","email","formData","setFormData","isValid","setIsValid","handleChange","e","target","prev","preventDefault","TextField","onChange","label","required","Button","variant","color","Dialog","onConfirm","onDecline","React","setOpen","DialogTitle","DialogContent","DialogContentText","DialogActions","onClick","autoFocus","StyledTableCell","theme","head","palette","common","black","white","body","fontSize","TableCell","StyledTableRow","hover","TableRow","table","minWidth","UsersTable","currentlyEdited","setCurrentlyEdited","userIdToRemove","setUserIdToRemove","isModalOpen","setIsModalOpen","closeModal","TableContainer","component","Paper","Table","aria-label","TableHead","TableBody","key","scope","src","picture","thumbnail","alt","handleEdit","userId","height","Home","styles","CircularProgress","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.758d19e5.chunk.js","sourcesContent":["import React, { createContext, useReducer, useEffect } from 'react';\n\nimport { getUsers } from '../services/user.service';\n\nexport interface User {\n  name: {\n    first: string;\n    last: string;\n  };\n  location: {\n    city: string;\n    country: string;\n  };\n  email: string;\n  picture: {\n    thumbnail: string;\n  };\n  login: {\n    uuid: string;\n  };\n}\n\ntype EditUserObject = Partial<User>;\n\nexport enum Actions {\n  addUsers,\n  editUser,\n  removeUser,\n  setLoading,\n  setError,\n}\n\ntype SetLoadingAction = {\n  type: Actions.setLoading;\n  payload: boolean;\n};\n\ntype SetErrorAction = {\n  type: Actions.setError;\n  payload: string;\n};\n\ntype AddUsersAction = {\n  type: Actions.addUsers;\n  payload: User[];\n};\n\ntype EditUserAction = {\n  type: Actions.editUser;\n  payload: {\n    id: string;\n    data: EditUserObject;\n  };\n};\n\ntype RemoveUserAction = {\n  type: Actions.removeUser;\n  payload: string;\n};\n\ntype Action =\n  | AddUsersAction\n  | EditUserAction\n  | RemoveUserAction\n  | SetLoadingAction\n  | SetErrorAction;\ntype Dispatch = (action: Action) => void;\ntype State = {\n  users: User[];\n  isLoading: boolean;\n  error: string;\n};\n\nconst initialState = {\n  users: (JSON.parse(window.localStorage.getItem('users')!) as User[]) || [],\n  isLoading: false,\n  error: '',\n};\n\nconst UserContext = createContext<{ state: State; dispatch: Dispatch }>({\n  state: initialState,\n  dispatch: () => null,\n});\n\nfunction updateUsersLs(users: User[]): void {\n  window.localStorage.setItem('users', JSON.stringify(users));\n}\n\nfunction userReducer(state: State, action: Action): State {\n  switch (action.type) {\n    case Actions.setLoading:\n      return {\n        ...state,\n        isLoading: action.payload,\n      };\n\n    case Actions.addUsers:\n      updateUsersLs(action.payload);\n\n      return {\n        ...state,\n        users: action.payload,\n      };\n\n    case Actions.editUser:\n      const updatedUsers = state.users.map((user) => {\n        if (user.login.uuid === action.payload.id) {\n          return {\n            ...user,\n            ...action.payload.data,\n          };\n        } else {\n          return user;\n        }\n      });\n      updateUsersLs(updatedUsers);\n\n      return { ...state, users: updatedUsers };\n\n    case Actions.removeUser:\n      const newUsers = state.users.filter((user) => user.login.uuid !== action.payload);\n      updateUsersLs(newUsers);\n\n      return { ...state, users: newUsers };\n\n    default:\n      return state;\n  }\n}\n\nfunction UserProvider({ children }: { children: React.ReactNode }) {\n  const [state, dispatch] = useReducer(userReducer, initialState);\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        dispatch({ type: Actions.setLoading, payload: true });\n        const response = await getUsers();\n        const users = response.data;\n        dispatch({ type: Actions.addUsers, payload: users });\n        dispatch({ type: Actions.setLoading, payload: false });\n      } catch (error) {\n        dispatch({ type: Actions.setLoading, payload: false });\n        dispatch({ type: Actions.setError, payload: 'Something went wrong' });\n      }\n    }\n\n    if (state.users.length === 0) {\n      fetchData();\n    }\n  }, [state.users]);\n\n  return <UserContext.Provider value={{ state, dispatch }}>{children}</UserContext.Provider>;\n}\n\nexport { UserProvider, UserContext };\n","import axios from 'axios';\n\nimport { User } from '../context/UserContext';\n\nexport function getUsers(): Promise<{ data: User[] }> {\n  return axios.get(`/results`);\n}\n","import React from 'react';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport MuiModal from '@material-ui/core/Modal';\n\ninterface Props {\n  children: React.ReactNode;\n  isOpen: boolean;\n  handleClose: () => void;\n}\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    paper: {\n      position: 'absolute',\n      width: 400,\n      backgroundColor: '#fff',\n      border: '2px solid #000',\n      padding: '40px',\n      left: '50%',\n      top: '50%',\n      transform: 'translate(-50%, -50%)',\n    },\n  })\n);\n\nfunction Modal({ children, isOpen, handleClose }: Props) {\n  const classes = useStyles();\n\n  return (\n    <div>\n      <MuiModal\n        open={isOpen}\n        onClose={handleClose}\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n      >\n        <div className={classes.paper}>{children}</div>\n      </MuiModal>\n    </div>\n  );\n}\n\nexport default Modal;\n","import React, { useState, useContext } from 'react';\nimport { withStyles, createStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport FormGroup from '@material-ui/core/FormGroup';\n\nimport { User, UserContext, Actions } from '../context/UserContext';\n\nfunction EditForm({ data, onSubmit }: { data: User; onSubmit: () => void }) {\n  const { dispatch } = useContext(UserContext);\n  const [formData, setFormData] = useState({\n    firstName: data.name.first,\n    lastName: data.name.last,\n    country: data.location.country,\n    city: data.location.city,\n    email: data.email,\n  });\n  const [isValid, setIsValid] = useState(true);\n\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const { name, value } = e.target;\n\n    setFormData((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n  }\n\n  function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n\n    if (!formData.email) {\n      return setIsValid(false);\n    }\n\n    const payload = {\n      id: data.login.uuid,\n      data: {\n        name: {\n          first: formData.firstName,\n          last: formData.lastName,\n        },\n        location: {\n          country: formData.country,\n          city: formData.city,\n        },\n        email: formData.email,\n      },\n    };\n\n    dispatch({ type: Actions.editUser, payload });\n    onSubmit();\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <StyledFormGroup>\n        <TextField\n          name=\"firstName\"\n          onChange={handleChange}\n          label=\"First name\"\n          value={formData.firstName}\n        />\n      </StyledFormGroup>\n      <StyledFormGroup>\n        <TextField\n          name=\"lastName\"\n          onChange={handleChange}\n          label=\"Last name\"\n          value={formData.lastName}\n        />\n      </StyledFormGroup>\n      <StyledFormGroup>\n        <TextField\n          name=\"country\"\n          onChange={handleChange}\n          label=\"Country\"\n          value={formData.country}\n        />\n      </StyledFormGroup>\n      <StyledFormGroup>\n        <TextField name=\"city\" onChange={handleChange} label=\"City\" value={formData.city} />\n      </StyledFormGroup>\n      <StyledFormGroup>\n        <TextField\n          error={!isValid}\n          name=\"email\"\n          type=\"email\"\n          required\n          onChange={handleChange}\n          label=\"Email\"\n          value={formData.email}\n        />\n      </StyledFormGroup>\n      <StyledFormGroup>\n        <Button variant=\"outlined\" type=\"submit\" color=\"primary\">\n          Submit\n        </Button>\n      </StyledFormGroup>\n    </form>\n  );\n}\n\nconst StyledFormGroup = withStyles(() =>\n  createStyles({\n    root: {\n      marginBottom: 20,\n    },\n  })\n)(FormGroup);\n\nexport default EditForm;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport DialogMui from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\ninterface Props {\n  isOpen: boolean;\n  onConfirm: (e: any) => void;\n  onDecline: () => void;\n}\n\nfunction Dialog({ isOpen, onConfirm, onDecline }: Props) {\n  const [open, setOpen] = React.useState(isOpen);\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <DialogMui\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">Are you sure?</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            The operation is irreversible\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onDecline} color=\"primary\">\n            No\n          </Button>\n          <Button onClick={onConfirm} color=\"primary\" autoFocus>\n            Yes\n          </Button>\n        </DialogActions>\n      </DialogMui>\n    </div>\n  );\n}\n\nexport default Dialog;\n","import React, { useState, useContext } from 'react';\nimport { withStyles, Theme, createStyles, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport { UserContext, Actions, User } from '../context/UserContext';\nimport Modal from './Modal';\nimport EditForm from './EditForm';\nimport Dialog from './Dialog';\n\nconst StyledTableCell = withStyles((theme: Theme) =>\n  createStyles({\n    head: {\n      backgroundColor: theme.palette.common.black,\n      color: theme.palette.common.white,\n    },\n    body: {\n      fontSize: 14,\n    },\n  })\n)(TableCell);\n\nconst StyledTableRow = withStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      '&:nth-of-type(odd)': {\n        backgroundColor: theme.palette.action.hover,\n      },\n    },\n  })\n)(TableRow);\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 700,\n  },\n});\n\nfunction UsersTable() {\n  const classes = useStyles();\n  const { state, dispatch } = useContext(UserContext);\n  const [currentlyEdited, setCurrentlyEdited] = useState<User>();\n  const [userIdToRemove, setUserIdToRemove] = useState<string>();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  function closeModal() {\n    setIsModalOpen(false);\n  }\n\n  function handleEdit(user: User) {\n    setIsModalOpen(true);\n    setCurrentlyEdited(user);\n  }\n\n  function handleRemoveClick(userId: string) {\n    setUserIdToRemove(userId);\n  }\n\n  function handleRemove(userId: string) {\n    dispatch({ type: Actions.removeUser, payload: userId });\n    setUserIdToRemove('');\n  }\n\n  return (\n    <div>\n      <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label=\"customized table\">\n          <TableHead>\n            <TableRow>\n              <StyledTableCell>First name</StyledTableCell>\n              <StyledTableCell>Last name</StyledTableCell>\n              <StyledTableCell>City</StyledTableCell>\n              <StyledTableCell>Country</StyledTableCell>\n              <StyledTableCell>Thumbnail</StyledTableCell>\n              <StyledTableCell>Email</StyledTableCell>\n              <StyledTableCell>Actions</StyledTableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {state.users.map((user) => (\n              <StyledTableRow key={user.login.uuid}>\n                <StyledTableCell component=\"th\" scope=\"row\">\n                  {user.name.first}\n                </StyledTableCell>\n                <StyledTableCell>{user.name.last}</StyledTableCell>\n                <StyledTableCell>{user.location.city}</StyledTableCell>\n                <StyledTableCell>{user.location.country}</StyledTableCell>\n                <StyledTableCell>\n                  <img src={user.picture.thumbnail} alt={user.name.first} />\n                </StyledTableCell>\n                <StyledTableCell>{user.email}</StyledTableCell>\n                <StyledTableCell>\n                  <span onClick={() => handleEdit(user)}>Edit</span> |{' '}\n                  <span onClick={() => handleRemoveClick(user.login.uuid)}>Remove</span>\n                </StyledTableCell>\n              </StyledTableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      {currentlyEdited && (\n        <Modal isOpen={isModalOpen} handleClose={closeModal}>\n          <EditForm onSubmit={closeModal} data={currentlyEdited} />\n        </Modal>\n      )}\n      {userIdToRemove && (\n        <Dialog\n          isOpen={!!userIdToRemove}\n          onConfirm={() => handleRemove(userIdToRemove)}\n          onDecline={() => setUserIdToRemove('')}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default UsersTable;\n","import React, { useContext } from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\n\nimport UsersTable from '../components/UsersTable';\nimport { UserContext } from '../context/UserContext';\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    paper: {\n      width: 400,\n      height: 400,\n      position: 'absolute',\n      left: '50%',\n      top: '50%',\n      transform: 'translate(-50%, -50%)',\n    },\n  })\n);\n\nfunction Home() {\n  const styles = useStyles();\n  const {\n    state: { isLoading, error },\n  } = useContext(UserContext);\n\n  if (isLoading) {\n    return <CircularProgress className={styles.paper} />;\n  }\n\n  if (error) {\n    return <div>{error}</div>;\n  }\n\n  return <UsersTable />;\n}\n\nexport default Home;\n","import React from 'react';\n\nimport Home from './pages/Home';\nimport { UserProvider } from './context/UserContext';\n\nfunction App() {\n  return (\n    <UserProvider>\n      <Home />\n    </UserProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}